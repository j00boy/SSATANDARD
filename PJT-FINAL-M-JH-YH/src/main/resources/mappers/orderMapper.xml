<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.ssatandard.model.dao.OrderDao">

    <!-- 전체 주문 조회 -->
    <!-- select 문은 orders 테이블에서 모든 주문을 조회합니다. 
         resultType="Order"는 결과가 Order 객체의 리스트로 반환됨을 나타냅니다. -->
    <select id="selectAll" resultType="Order">
        SELECT orderId, productName,
        productPrice, amount, userId, productId, totalPrice,
        DATE_FORMAT(createdAt, '%Y-%m-%d %H:%i:%s') AS regDate
        FROM orders
        ORDER BY createdAt DESC;
    </select>

    <!-- 전체 주문 조회 및 검색 기능 -->
    <!-- select 문은 orders 테이블에서 검색 조건에 맞는 주문을 조회합니다. 
         parameterType="SearchCondition"는 검색 조건을 담은 객체를 파라미터로 받습니다. -->
    <select id="search" parameterType="SearchCondition" resultType="Order">
        SELECT orderId, userId, productId, productName, productPrice, amount, totalPrice, image, DATE_FORMAT(createdAt, '%Y-%m-%d %H:%i') AS regDate
        FROM orders 
        <if test="orderByDir != null and orderBy != 'none'">
            ORDER BY ${orderBy} ${orderByDir}
        </if>
        <if test="orderBy == 'none'">
        	ORDER BY regDate DESC;
        </if>
    </select>

    <!-- 최신일 기준 특정 사용자 주문 조회 -->
    <!-- select 문은 orders 테이블에서 특정 사용자(userId)의 주문을 조회합니다. 
         parameterType="String"는 사용자 ID를 파라미터로 받습니다. -->
    <select id="searchByUserId" parameterType="String" resultType="Order">
        SELECT orderId, productName, productPrice, amount,
        totalPrice, image, DATE_FORMAT(createdAt, '%Y-%m-%d %H:%i:%s') AS regDate
        FROM orders
        WHERE userId = #{userId}
        ORDER BY regDate DESC;
    </select>

    <!-- 장바구니 물품들을 결제하면서 주문 테이블로 넘기기 -->
    <!-- insert 문은 orders 테이블에 새로운 주문을 추가합니다. 
         useGeneratedKeys="true"와 keyProperty="orderId"는 자동 생성된 키 값을 반환합니다. -->
    <insert id="insertOrder" parameterType="Map" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (userId, productId, productName, productPrice, amount,
        totalPrice, image)
        VALUES (#{userId}, #{productId}, #{productName}, #{productPrice}, #{amount},
        #{totalPrice}, #{image})
    </insert>
    
    <!-- 유저별 전체 주문 금액 가져오기 -->
    <!-- select 문은 특정 사용자(userId)의 총 주문 금액을 조회합니다. 
         resultType="int"는 결과가 정수형으로 반환됨을 나타냅니다. -->
    <select id="getTotalPrice" parameterType="String" resultType="int">
        SELECT SUM(totalPrice)
        FROM orders
        WHERE userId = #{userId}
        GROUP BY userId;
    </select>

</mapper>
